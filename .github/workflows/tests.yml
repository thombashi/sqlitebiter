name: Tests

on: [push, pull_request]

jobs:
  unit-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
        os: [ubuntu-latest, macos-latest, windows-latest]
    concurrency:
      group: ${{ github.workflow }}-${{ github.job }}-${{ matrix.os }}-${{ matrix.python-version }}
      cancel-in-progress: true
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pip
        run: python -m pip install --upgrade --disable-pip-version-check "pip>=21.1"

      - name: Get pip cache dir
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.pip-cache.outputs.dir }}
            ./.tox
          key: ${{ matrix.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('setup.py', '**/requirements.txt') }}
          restore-keys: ${{ matrix.os }}-${{ matrix.python-version }}-pip-

      - name: Install dependencies
        run: python -m pip install --upgrade tox

      - name: Run tests
        if: matrix.os != 'windows-latest'
        run: tox -e py
        env:
          PYTEST_DISCORD_WEBHOOK: ${{ secrets.PYTEST_DISCORD_WEBHOOK }}

      - name: Run tests
        if: matrix.os == 'windows-latest'
        run: |
          python -m pip install --upgrade .[test] -c constraints.txt
          pytest test

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    timeout-minutes: 20
    env:
      BIN_NAME: sqlitebiter
      DIST_DIR_NAME: dist

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install pip
        run: python -m pip install --upgrade --disable-pip-version-check "pip>=21.1"

      - name: Get pip cache dir
        id: pip-cache
        run: echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.pip-cache.outputs.dir }}
            ./.tox
          key: ${{ matrix.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ matrix.os }}-pip-

      - name: Build - Linux
        run: |
          sudo apt -qq update
          sudo apt install -y fakeroot

          ./build_deb_package.sh
        if: matrix.os == 'ubuntu-latest'

      - name: Build - macOS
        run: |
          ./build_macos_binary.sh
        if: matrix.os == 'macos-latest'

      - name: Build - Windows
        shell: bash
        run: |
          BIN_PATH=${DIST_DIR_NAME}/${BIN_NAME}.exe
          ARCHIVE_PATH=${DIST_DIR_NAME}/${BIN_NAME}_win_x64.zip

          python -m pip install -q --upgrade .[all,buildexe]

          pyinstaller cli.py --onefile --name $BIN_NAME --clean --noconfirm --specpath build
          ${BIN_PATH} version

          powershell compress-archive -Force $BIN_PATH $ARCHIVE_PATH
        if: matrix.os == 'windows-latest'

      - name: List build binaries
        id: ls_dist
        shell: bash
        run: |
          ls ${DIST_DIR_NAME}/${BIN_NAME}_*

          echo "::set-output name=dist_file::$(ls ${DIST_DIR_NAME}/${BIN_NAME}_*)"

      - name: Calculate checksum of a binary file - Posix
        id: calc_sha_posix
        shell: bash
        run: |
          set -x

          sha_file="sha256_$(basename ${{ steps.ls_dist.outputs.dist_file }}).txt"
          shasum -a 256 "${{ steps.ls_dist.outputs.dist_file }}" > "$sha_file"

          echo "::set-output name=sha_file::$sha_file"
        if: matrix.os != 'windows-latest'

      - name: Calculate checksum of a binary file - Windows
        id: calc_sha_win
        shell: bash
        run: |
          set -x

          sha_file="sha256_$(basename ${{ steps.ls_dist.outputs.dist_file }}).txt"
          powershell certutil -hashfile "${{ steps.ls_dist.outputs.dist_file }}" SHA256 > "$sha_file"

          echo "::set-output name=sha_file::$sha_file"
        if: matrix.os == 'windows-latest'

      - name: Checksum
        id: checksum
        shell: bash
        run: |
          if [ "${{ steps.calc_sha_posix.outputs.sha_file }}" != "" ]; then
            echo "::set-output name=checksum_file::${{ steps.calc_sha_posix.outputs.sha_file }}"
          elif [ "${{ steps.calc_sha_win.outputs.sha_file }}" != "" ]; then
            echo "::set-output name=checksum_file::${{ steps.calc_sha_win.outputs.sha_file }}"
          fi

      - name: Release (dummy)
        shell: bash
        run: |
          echo ${{ steps.ls_dist.outputs.dist_file }}
          echo ${{ steps.checksum.outputs.checksum_file }}
